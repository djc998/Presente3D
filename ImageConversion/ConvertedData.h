#ifndef ConvertedData_header
#define ConvertedData_header

/* 
* File: ConvertedData.h 
* Created by: Vitalii V. Boiko
* Short Description: 
* 
*/

#include <vector>

#include "framework\Color.h"
#include "framework\Vertex.h"

#include "scene/data/ShapeData.h"

const int Z_OFFSET = 50;

struct uv_coords
{
    float u;
    float v;
};

struct shape_texture_data
{
    std::vector<Vertex> verts;
    std::vector<Vertex> normals;
    std::vector<float>  u;
    std::vector<float>  v;
};

struct basic_stream
{
    std::vector<Vertex> verts;
    std::vector<Vertex> normals;
    std::vector<Color>  vcolors;    
};

struct ConvertedShapeData
{
public:			
	ConvertedShapeData(){
		texture_path = "";
		height = width = extrude_distance = 0;

	}


    Vertex  pos;

    // texture will be generated by the native ogre api
    std::string   texture_path;
    shape_texture_data texture_data;

    std::vector<Vertex> verts;
    std::vector<Vertex> normals;
    std::vector<Color>  vcolors;    

    float height;
    float width;
	float extrude_distance; // for backface 
    
    ShapeData xml_data;

    std::vector<ConvertedShapeData*> childs;	  

    size_t GetVertsAmount(){
        return verts.size();
    }

    size_t GetAllVertsAmount(){
        size_t summ = 0;
        summ += GetVertsAmount();
        for(size_t i = 0; i < childs.size(); i++){
            summ += childs[i]->GetAllVertsAmount();
        }
        return summ;
    }
};

#endif /* ConvertedData_header */
